package loxLanguage;

import java.util.List;
import java.util.Arrays;

public class AstGenerator {

    public static void main(String[] args) {
        defineAst("Expression", Arrays.asList(
                "Literal  : Object value",
                "Logical  : Expr left, Token operator, Expr right",
                "Set      : Expr object, Token name, Expr value",
                "Super    : Token keyword, Token method",
                "This     : Token keyword",
                "Unary    : Token operator, Expr right",
                "Binary   : Expr left, Token operator, Expr right",
                "Get      : Expr object, Token name",
                "Call     : Expr callee, Token paren, List<Expr> arguments",
                "Grouping : Expr expression",
                "Variable : Token name",
                "Assign   : Token name, Expr value"
        ), Arrays.asList("import java.util.List;"));

        defineAst("Statement", Arrays.asList(
                "Expression : Expr expression",
                "Function   : Token name, List<Token> params, List<Stmt> body",
                "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
                "Block      : List<Stmt> statements",
                "Class      : Token name, Expr.Variable superclass, List<Stmt.Function> methods",
                "Print      : Expr expression",
                "Return     : Token keyword, Expr value",
                "Var        : Token name, Expr initializer",
                "While      : Expr condition, Stmt body"
        ), Arrays.asList("import java.util.List;"));
    }

    private static void defineAst(String baseName, List<String> types, List<String> imports) {
        // Print package and imports
        System.out.println("package dev.britannio.lox;");
        System.out.println();
        for (String i : imports) {
            System.out.println(i);
        }
        System.out.println("// GENERATED BY GenerateAst.java");
        System.out.println();

        // Define the abstract class
        System.out.println("abstract class " + baseName + " {");

        defineVisitor(baseName, types);

        // The base accept() method
        System.out.println();
        System.out.println("  abstract <R> R accept(Visitor<R> visitor);");
        System.out.println();

        // Define each type of AST node
        for (var type : types) {
            String className = type.split(":")[0].trim();
            String fields = type.split(":")[1].trim();
            defineType(baseName, className, fields);
        }

        System.out.println("}");
    }

    private static void defineVisitor(String baseName, List<String> types) {
        System.out.println("  interface Visitor<R> {");

        for (var type : types) {
            var typeName = type.split(":")[0].trim();
            System.out.println("    R visit" + typeName + baseName + "(" + typeName + " " + baseName.toLowerCase() + ");");
            System.out.println();
        }
        System.out.println("  }");
    }

    private static void defineType(String baseName, String className, String fieldList) {
        System.out.println("  static class " + className + " extends " + baseName + " {");

        // Constructor
        System.out.println("    " + className + "(" + fieldList + ") {");

        // Store parameters in fields
        String[] fields = fieldList.split(", ");
        for (var field : fields) {
            var name = field.split(" ")[1];
            System.out.println("      this." + name + " = " + name + ";");
        }

        System.out.println("    }");

        // Visitor pattern
        System.out.println();
        System.out.println("    @Override");
        System.out.println("    <R> R accept(Visitor<R> visitor) {");
        System.out.println("      return visitor.visit" + className + baseName + "(this);");
        System.out.println("    }");

        // Fields
        System.out.println();
        for (var field : fields) {
            System.out.println("    final " + field + ";");
        }

        System.out.println("  }");
        System.out.println();
    }
}
